{"version":3,"sources":["assets/logoFont.png","assets/logoOnScreen.png","components/AppBar.js","components/BottomNavigation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","display","toolBar","justifyContent","bottomToolbar","background","minHeight","LogoAppBar","classes","className","AppBar","position","style","boxShadow","Toolbar","src","logoFont","alt","Button","color","createMuiTheme","palette","primary","main","width","overflow","bottom","backgroundColor","BottomNavigate","React","useState","value","setValue","BottomNavigation","onChange","event","newValue","showLabels","BottomNavigationAction","label","icon","App","logoOnScreen","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","Fragment","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.83ad92a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logoFont.4429dcd1.png\";","module.exports = __webpack_public_path__ + \"static/media/logoOnScreen.db1b4dfe.png\";","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\nimport logoFont from \"../assets/logoFont.png\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  toolBar: {\n    // background: \"#212121\",\n\n    justifyContent: \"space-between\",\n  },\n\n  bottomToolbar: {\n    background: \"#E5E5E5\",\n    minHeight: \"5px\",\n  },\n}));\n\nexport default function LogoAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar\n        position=\"static\"\n        style={{ background: \"transparent\", boxShadow: \"none\" }}\n      >\n        <Toolbar className={classes.toolBar}>\n          <img src={logoFont} alt=\"logo\" />\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  makeStyles,\n  MuiThemeProvider,\n  createMuiTheme,\n} from \"@material-ui/core/styles\";\nimport BottomNavigation from \"@material-ui/core/BottomNavigation\";\nimport BottomNavigationAction from \"@material-ui/core/BottomNavigationAction\";\nimport FormatListNumberedIcon from \"@material-ui/icons/FormatListNumbered\";\nimport ViewAgendaIcon from \"@material-ui/icons/ViewAgenda\";\nimport FastfoodIcon from \"@material-ui/icons/Fastfood\";\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#f3d250\",\n    },\n  },\n});\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n    overflow: \"hidden\",\n    position: \"fixed\",\n    bottom: 0,\n    backgroundColor: \"#5da2d5\",\n  },\n});\n\nexport default function BottomNavigate() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <BottomNavigation\n        value={value}\n        onChange={(event, newValue) => {\n          setValue(newValue);\n        }}\n        showLabels\n        className={classes.root}\n      >\n        <BottomNavigationAction\n          label=\"List\"\n          icon={<FormatListNumberedIcon />}\n        />\n        <BottomNavigationAction label=\"Categories\" icon={<ViewAgendaIcon />} />\n        <BottomNavigationAction label=\"Products\" icon={<FastfoodIcon />} />\n      </BottomNavigation>\n    </MuiThemeProvider>\n  );\n}\n","import React from \"react\";\nimport LogoAppBar from \"./components/AppBar.js\";\nimport BottomNavigate from \"./components/BottomNavigation.js\";\nimport \"./App.css\";\nimport logoOnScreen from \"./assets/logoOnScreen.png\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LogoAppBar />\n\n      <header className=\"App-header\">\n        <img src={logoOnScreen} className=\"App-logo\" alt=\"logo\" />\n        <BottomNavigate />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}